local camera = require "orthographic.camera"
local spin_sprite_url = msg.url("main:/slot/spin#spin_button")
local camera_id = hash("/camera")
local wheel_id = hash("/slot/wheel")

local is_on_sprite
local loop_rotate

function init(self)
	math.randomseed(os.time())
	msg.post(".", "acquire_input_focus")
	self.sprite_picker = require "utils.pick"
	self.is_spinning = false
	self.is_pressing_spin = false
end

function on_message(self, message_id, message, sender)

end

function on_input(self, action_id, action)
	if self.is_spinning then return end
	
	if action_id == hash("touch") and action.pressed then
		if is_on_sprite(self,action) then
			self.is_pressing_spin = true
			-- todo change with quaternion
			go.animate(wheel_id, "euler.z", go.PLAYBACK_ONCE_FORWARD, -960, go.EASING_OUTCUBIC, 3, 0, loop_rotate)		
		end
	end
	
	if action_id == hash("touch") and action.released then
		if self.is_pressing_spin then
			self.is_pressing_spin = false
			self.is_spinning = true
			go.cancel_animations(wheel_id,"euler.z")
			go.cancel_animations(wheel_id,"rotation")

			local skill = math.random(1,6)
			-- todo start conclude spinning routine
			
			-- todo after apply skill
			if skill == 3 then
				msg.post("/player#player_controller", "update_health",{change = 500})
			else
				msg.post("/enemies#enemy_controller", "apply_skill",{skill_index = skill})
			end			
		end
	end
end

loop_rotate = function()
	local r = go.get_rotation()
	-- todo update to quaternion
	--go.animate(wheel_id, "rotation", go.PLAYBACK_LOOP_PINGPONG, -958, go.EASING_INOUTSINE, 0.5, 0.1)
end

is_on_sprite = function(self,action)
	local world_coordinates = camera.screen_to_world(camera_id, vmath.vector3(action.x,action.y,0))
	return self.sprite_picker.pick_sprite(spin_sprite_url,world_coordinates.x,world_coordinates.y)
end